import jsPDF from 'jspdf';

interface AnalysisData {
  id: string;
  timestamp: string;
  clientProfile: {
    name: string;
    industry: string;
    size: string;
    budget: [number, number];
    region: string;
  };
  analysisFilters: {
    sectors: string[];
    priorities: string[];
    roiRange: [number, number];
    implementationTime: string;
    clientTypes: string[];
  };
  analysisConfig: {
    title: string;
    objectives: string;
    painPoints: string;
    presentationDate: string;
    analysisType: string;
  };
  selectedDNSOs: any[];
  totalROI: { min: number; max: number };
  status: string;
}

export class AnalysisPDFGenerator {
  private doc: jsPDF;
  private pageWidth: number;
  private pageHeight: number;
  private margin: number;
  private currentY: number;

  constructor() {
    this.doc = new jsPDF('p', 'mm', 'a4');
    this.pageWidth = this.doc.internal.pageSize.getWidth();
    this.pageHeight = this.doc.internal.pageSize.getHeight();
    this.margin = 20;
    this.currentY = this.margin;
  }

  private formatCurrency(amount: number): string {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  }

  private addPageHeader() {
    // Company Logo and Header
    this.doc.setFillColor(59, 130, 246); // Blue color
    this.doc.rect(0, 0, this.pageWidth, 25, 'F');
    
    this.doc.setTextColor(255, 255, 255);
    this.doc.setFontSize(20);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text('OpportunityForge', this.margin, 16);
    
    this.doc.setFontSize(10);
    this.doc.setFont('helvetica', 'normal');
    this.doc.text('Strategic Analysis Report', this.pageWidth - this.margin - 50, 16);
    
    this.currentY = 35;
  }

  private addPageFooter() {
    const pageNumber = this.doc.getNumberOfPages();
    this.doc.setTextColor(128, 128, 128);
    this.doc.setFontSize(8);
    this.doc.text(
      `Page ${pageNumber} | Generated by StrategyVault | ${new Date().toLocaleDateString()}`,
      this.margin,
      this.pageHeight - 10
    );
  }

  private checkPageBreak(additionalHeight: number) {
    if (this.currentY + additionalHeight > this.pageHeight - 30) {
      this.addPageFooter();
      this.doc.addPage();
      this.addPageHeader();
    }
  }

  private addTitle(text: string, size: number = 16) {
    this.checkPageBreak(15);
    this.doc.setTextColor(30, 58, 138); // Dark blue
    this.doc.setFontSize(size);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(text, this.margin, this.currentY);
    this.currentY += size === 16 ? 12 : 8;
  }

  private addSubtitle(text: string) {
    this.addTitle(text, 12);
  }

  private addText(text: string, fontSize: number = 10, color: number[] = [0, 0, 0]) {
    this.checkPageBreak(8);
    this.doc.setTextColor(color[0], color[1], color[2]);
    this.doc.setFontSize(fontSize);
    this.doc.setFont('helvetica', 'normal');
    
    // Word wrap for long text
    const splitText = this.doc.splitTextToSize(text, this.pageWidth - 2 * this.margin);
    this.doc.text(splitText, this.margin, this.currentY);
    this.currentY += splitText.length * (fontSize * 0.5) + 3;
  }

  private addHighlightBox(title: string, content: string, bgColor: number[] = [240, 245, 255]) {
    this.checkPageBreak(25);
    
    const boxHeight = 20;
    this.doc.setFillColor(bgColor[0], bgColor[1], bgColor[2]);
    this.doc.roundedRect(this.margin, this.currentY - 5, this.pageWidth - 2 * this.margin, boxHeight, 2, 2, 'F');
    
    this.doc.setTextColor(30, 58, 138);
    this.doc.setFontSize(11);
    this.doc.setFont('helvetica', 'bold');
    this.doc.text(title, this.margin + 5, this.currentY + 2);
    
    this.doc.setTextColor(0, 0, 0);
    this.doc.setFontSize(9);
    this.doc.setFont('helvetica', 'normal');
    const splitContent = this.doc.splitTextToSize(content, this.pageWidth - 2 * this.margin - 10);
    this.doc.text(splitContent, this.margin + 5, this.currentY + 8);
    
    this.currentY += boxHeight + 5;
  }

  private addDNSOTable(dnsos: any[]) {
    this.checkPageBreak(50);
    
    const tableStart = this.currentY;
    const colWidths = [50, 30, 30, 40, 40];
    const headers = ['Opportunity', 'Sector', 'Priority', 'ROI Min', 'ROI Max'];
    
    // Table header
    this.doc.setFillColor(59, 130, 246);
    this.doc.rect(this.margin, tableStart, this.pageWidth - 2 * this.margin, 10, 'F');
    
    this.doc.setTextColor(255, 255, 255);
    this.doc.setFontSize(9);
    this.doc.setFont('helvetica', 'bold');
    
    let xPos = this.margin + 2;
    headers.forEach((header, index) => {
      this.doc.text(header, xPos, tableStart + 7);
      xPos += colWidths[index];
    });
    
    this.currentY = tableStart + 10;
    
    // Table rows
    dnsos.forEach((dnso, index) => {
      this.checkPageBreak(8);
      
      const rowColor = index % 2 === 0 ? [249, 250, 251] : [255, 255, 255];
      this.doc.setFillColor(rowColor[0], rowColor[1], rowColor[2]);
      this.doc.rect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 8, 'F');
      
      this.doc.setTextColor(0, 0, 0);
      this.doc.setFontSize(8);
      this.doc.setFont('helvetica', 'normal');
      
      xPos = this.margin + 2;
      const rowData = [
        dnso.title.substring(0, 35) + (dnso.title.length > 35 ? '...' : ''),
        dnso.sector,
        dnso.priority,
        this.formatCurrency(dnso.roi_min),
        this.formatCurrency(dnso.roi_max)
      ];
      
      rowData.forEach((data, colIndex) => {
        this.doc.text(data, xPos, this.currentY + 6);
        xPos += colWidths[colIndex];
      });
      
      this.currentY += 8;
    });
    
    this.currentY += 5;
  }

  generateAnalysisPDF(analysisData: AnalysisData): Blob {
    // Title Page
    this.addPageHeader();
    
    // Main Title
    this.currentY += 20;
    this.doc.setTextColor(30, 58, 138);
    this.doc.setFontSize(24);
    this.doc.setFont('helvetica', 'bold');
    const titleLines = this.doc.splitTextToSize(analysisData.analysisConfig.title, this.pageWidth - 2 * this.margin);
    this.doc.text(titleLines, this.margin, this.currentY);
    this.currentY += titleLines.length * 12 + 10;
    
    // Subtitle
    this.doc.setFontSize(14);
    this.doc.setTextColor(107, 114, 128);
    this.doc.text(`${analysisData.analysisConfig.analysisType} for ${analysisData.clientProfile.name}`, this.margin, this.currentY);
    this.currentY += 20;
    
    // Executive Summary Box
    this.addHighlightBox(
      'EXECUTIVE SUMMARY',
      `Strategic analysis identifying ${analysisData.selectedDNSOs.length} high-impact opportunities with total ROI potential of ${this.formatCurrency(analysisData.totalROI.min)} - ${this.formatCurrency(analysisData.totalROI.max)}.`
    );
    
    this.currentY += 10;
    
    // Client Profile Section
    this.addTitle('CLIENT PROFILE');
    this.addHighlightBox('Organization', analysisData.clientProfile.name);
    this.addHighlightBox('Industry', analysisData.clientProfile.industry);
    this.addHighlightBox('Size', analysisData.clientProfile.size);
    this.addHighlightBox('Budget Range', `${this.formatCurrency(analysisData.clientProfile.budget[0])} - ${this.formatCurrency(analysisData.clientProfile.budget[1])}`);
    if (analysisData.clientProfile.region) {
      this.addHighlightBox('Region', analysisData.clientProfile.region);
    }
    
    this.currentY += 15;
    
    // Objectives Section
    if (analysisData.analysisConfig.objectives) {
      this.addTitle('CLIENT OBJECTIVES');
      this.addText(analysisData.analysisConfig.objectives);
      this.currentY += 10;
    }
    
    // Pain Points Section
    if (analysisData.analysisConfig.painPoints) {
      this.addTitle('KEY PAIN POINTS');
      this.addText(analysisData.analysisConfig.painPoints);
      this.currentY += 10;
    }
    
    // New Page for Opportunities
    this.addPageFooter();
    this.doc.addPage();
    this.addPageHeader();
    
    // Opportunity Analysis
    this.addTitle('RECOMMENDED OPPORTUNITIES');
    
    // Summary Metrics
    this.addHighlightBox(
      'PORTFOLIO METRICS',
      `Total Opportunities: ${analysisData.selectedDNSOs.length} | Combined ROI: ${this.formatCurrency(analysisData.totalROI.min)} - ${this.formatCurrency(analysisData.totalROI.max)} | Average ROI: ${this.formatCurrency(analysisData.totalROI.min / analysisData.selectedDNSOs.length)} - ${this.formatCurrency(analysisData.totalROI.max / analysisData.selectedDNSOs.length)}`,
      [220, 252, 231] // Light green
    );
    
    this.currentY += 10;
    
    // Opportunities Table
    this.addSubtitle('Detailed Opportunity Breakdown');
    this.addDNSOTable(analysisData.selectedDNSOs);
    
    // Detailed DNSO Analysis
    this.addTitle('OPPORTUNITY DEEP DIVE');
    
    analysisData.selectedDNSOs.forEach((dnso, index) => {
      this.checkPageBreak(40);
      
      if (index > 0) this.currentY += 10;
      
      this.addSubtitle(`${index + 1}. ${dnso.title}`);
      this.addText(`DNSO ID: ${dnso.id}`, 9, [107, 114, 128]);
      this.addText(`Sector: ${dnso.sector} | Priority: ${dnso.priority} | Client Type: ${dnso.client_type}`);
      this.addText(`ROI Range: ${this.formatCurrency(dnso.roi_min)} - ${this.formatCurrency(dnso.roi_max)}`);
      this.addText(`Implementation Time: ${dnso.implementation_time} | Geography: ${dnso.geography}`);
      
      if (dnso.competitive_advantage) {
        this.addText(`Competitive Advantage: ${dnso.competitive_advantage}`);
      }
      
      if (dnso.description) {
        this.addText(`Description: ${dnso.description}`);
      }
      
      this.currentY += 5;
    });
    
    // Analysis Criteria
    this.addPageFooter();
    this.doc.addPage();
    this.addPageHeader();
    
    this.addTitle('ANALYSIS METHODOLOGY');
    
    this.addSubtitle('Selection Criteria');
    if (analysisData.analysisFilters.sectors.length > 0) {
      this.addText(`Target Sectors: ${analysisData.analysisFilters.sectors.join(', ')}`);
    }
    if (analysisData.analysisFilters.priorities.length > 0) {
      this.addText(`Priority Levels: ${analysisData.analysisFilters.priorities.join(', ')}`);
    }
    this.addText(`ROI Range: ${this.formatCurrency(analysisData.analysisFilters.roiRange[0])} - ${this.formatCurrency(analysisData.analysisFilters.roiRange[1])}`);
    if (analysisData.analysisFilters.implementationTime) {
      this.addText(`Implementation Timeline: ${analysisData.analysisFilters.implementationTime}`);
    }
    if (analysisData.analysisFilters.clientTypes.length > 0) {
      this.addText(`Client Types: ${analysisData.analysisFilters.clientTypes.join(', ')}`);
    }
    
    this.currentY += 15;
    
    // Next Steps
    this.addTitle('RECOMMENDED NEXT STEPS');
    this.addText('1. Review and prioritize opportunities based on strategic fit and available resources');
    this.addText('2. Conduct detailed feasibility analysis for top 3 opportunities');
    this.addText('3. Develop implementation roadmap and resource allocation plan');
    this.addText('4. Establish success metrics and monitoring framework');
    this.addText('5. Schedule stakeholder alignment meetings and approval processes');
    
    this.currentY += 15;
    
    // Footer Information
    this.addHighlightBox(
      'DOCUMENT INFORMATION',
      `Generated: ${new Date().toLocaleDateString()} | Analysis ID: ${analysisData.id} | Status: ${analysisData.status.toUpperCase()} | Presentation Date: ${analysisData.analysisConfig.presentationDate || 'TBD'}`,
      [254, 243, 199] // Light yellow
    );
    
    this.addPageFooter();
    
    return this.doc.output('blob');
  }
}

export const generateAnalysisPDF = (analysisData: AnalysisData): string => {
  const generator = new AnalysisPDFGenerator();
  const blob = generator.generateAnalysisPDF(analysisData);
  
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `${analysisData.analysisConfig.title.replace(/\s+/g, '_')}_Analysis_${new Date().toISOString().split('T')[0]}.pdf`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
  
  return a.download;
};
